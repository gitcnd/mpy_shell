version	1.0.20240626
0	{} command not found
1	No manual entry for {}
2	Usage: man [keyword]
3	File write exception: {}
4	Socket send exception: {}
5	Output file setup failed: {}
6	Input file setup failed: {}
7	Socket setup failed: {}
8	Failed to get NTP time: {}
9	{}: missing operand(s)
10	{}: {}
11	{}: target '{}' is not a directory
12	{}: cannot access '{}': No such file or directory
13	sh: !{}: event not found
14	usage: ping <address>
15	Error getting IP address: {}
16	PING {} ({}) 56(84) bytes of data.
17	Request timeout for icmp_seq {}
18	--- {} ping statistics ---\n{} packets transmitted, {} received, {:.0f}% packet loss, time {:.0f}ms
19	rtt min/avg/max/mdev = {:.3f}/{:.3f}/{:.3f}/{:.3f} ms
20	Unknown
21	Power on
22	Hardware
23	Watchdog
24	Deep sleep
25	Soft
26	CPU last reset reason {}: {} reset
27	Rebooting...
28	usage: pwm --pin=<pin_number> --duty=<0 to 65535> --freq=<integer number> [--loop=<n> --ondelay=<seconds> --offdelay=<seconds> --voff=<duty cyle for off>]
29	usage: setpin --pin=<pin_number> --value=<0 or 1>
30	usage: getpin --pin=<pin_number> [--pullup=1]
31	https://raw.githubusercontent.com/gitcnd/mpy_shell/main
32	https://raw.githubusercontent.com/gitcnd/mpy_shell/main/1.x
33	/lib/sh.py /lib/sh0.py /lib/sh1.py /lib/sh2.py /lib/sh3.py /lib/sh.txt
34	/lib/sh.mpy /lib/sh0.mpy /lib/sh1.mpy /lib/sh2.mpy /lib/sh3.mpy /lib/sh.txt
35	Listening for espnow packets{}. Hit ^C to stop.
36	 on channel {chan}
37	usage: curl [-I] [-O] [-i] [--data=data] [--output=outfile] [--user=username:password] <url>
38	re-run$GRN import sh$NORM to re-start the updated shell
39	Error fetching {} from {}:{}: {}")
40	Wrote {}b to {} from {}
41	Uptime: {} hours, {} minutes, {} seconds
42	{}-{:02}-{:02} {:02}:{:02}.{:02}
43	\x1b[s\x1b7\x1b[999C\x1b[999B\x1b[6n\x0d\x1b[u\x1b8${WHT}{} version {}$NORM on$GRN Micropython {} on {}$NORM
44	Enter current password:
45	Enter new password :
46	\nRepeat new password:
47	\nWrong current password
48	\nNew password saved in /settings.toml
49	\nRepeat password did not match
50	\nUnsupported hash algorithm in existing password.  Expected linux shadow format 5 (salted sha256)
51	\nPassword removed
52	Enter text to write to the file (n.b. does not echo back). Press ^D (Ctrl+D) to end
53	Telnet server started on {}:{}
54	 (mode {} not implimented)
55	No response from client {} within timeout. Disconnected
56	New telnet connection from {}
57	server_socket err? s={}
58	Handling exceptional condition for {}
59	\x0d\nWelcome to$GRN {} $NORM- {} Micropython {} on {}\x0d\n
60	possible history_file error: {} for line: {}
61	KeyboardInterrupt:
62	Closed telnet client {} IP {}
63	No more input
64	term-size set command {} error: {}; seq={}
65	Error listing directory: {}
66	 sh: !{}: event not found
67	Unterminated string
68	Time set to: {:04}-{:02}-{:02} {:02}:{:02}:{:02}
69	usage:$WHT scani2c$GRN --scl=<scl pin number> --sda=<sda pin number>$YEL --bus=<optional bus 0 or 1>$NORM
70	Scanning I2C devices on bus{} scl=gpio{} sda=gpio{}
71	I2C devices found: {}
72	No I2C devices found.
73	\x1b[32;1mcarnet updater v{}\x1b[0m using {}
74	http://172.22.1.66/carnet/{}
75	/lib
76	\x1b[32;1mUpdate complete.\x1b[0m
dir	List directory contents (alias for ls -Flatr)
ls	List directory contents\n$GRN -l $NORM List in long format\n$GRN -a $NORM Include hidden files\n$GRN -h $NORM Human-readable sizes\n$GRN -F $NORM append file classification indicator\n$GRN -t $NORM sort by time\n$GRN -S $NORM sort by size\n$GRN -r $NORM reverse order sort
cd	Change directory\n$GRN cd <directory> $NORM Change to the specified directory
mv	Move or rename files or directories\n$GRN mv <source> <destination> $NORM Move source to destination\n$GRN -i $NORM Prompt before overwrite\n$GRN -f $NORM Force move by overwriting destination files
rm	Remove files or directories\n$GRN -r $NORM Remove directories and their contents recursively\n$GRN -f $NORM Ignore nonexistent files, never prompt
cp	Copy files or directories\n$GRN -r $NORM Copy directories recursively\n$GRN -i $NORM Prompt before overwrite\n$GRN -f $NORM Force copy by overwriting destination files
pwd	Print working directory
find	Search for files in a directory hierarchy\n$GRN find <path> $NORM Start search from the specified path\n$GRN -name $NORM Search for files by name\n$GRN -type $NORM Search for files by type (e.g., f for files, d for directories)
sort	Sort lines of text files\n$GRN -r $NORM Reverse the result of comparisons\n$GRN -n $NORM Compare according to string numerical value
mkdir	Make directories\n$GRN -p $NORM Create parent directories as needed
df	Report file system disk space usage\n$GRN -h $NORM Human-readable sizes\n$GRN -i $NORM Display inode information
free	show memory usage
du	Estimate file space usage\n$GRN -h $NORM Human-readable sizes\n$GRN -s $NORM Display only a total for each argument
rmdir	Remove empty directories\n$GRN --ignore-fail-on-non-empty $NORM Ignore each failure to remove a directory that is not empty
touch	Change file timestamps or create an empty file
XXtouch	Change file timestamps or create an empty file\n$GRN -c $NORM Do not create any files\n$GRN -d $NORM Use the specified time instead of the current time
vi	vim-like Text editor
man	Display manual pages for commands\n$GRN man <command> $NORM Show the manual page for the specified command
nano	Text editor
edit	Text editor. Use Ctrl-S <enter> to save, and Ctrl-Q to exit
grep	Search text using patterns\n$GRN -i $NORM Ignore case distinctions\n$GRN -r $NORM Read all files under each directory recursively\n$GRN -v $NORM Select non-matching lines
cat	Concatenate and display files
tail	Output the last part of files\n$GRN -n $NORM Output the last N lines\n$GRN -f $NORM Output appended data as the file grows
head	Output the first part of files\n$GRN -n $NORM Output the first N lines
echo	Display a line of text
more	View file contents page-by-page
wc	Word, line, character, and byte count\n$GRN -c $NORM Print the byte counts\n$GRN -w $NORM Print the word counts\n$GRN -l $NORM Print the newline counts
zcat	Concatenate compressed files and output
less	View file contents page-by-page with backward movement
hexedit	View and edit files in hexadecimal format
history	Command history
uname	Print system information\n$GRN -a $NORM Print all information
uptime	Tell how long the system has been running
hostname	Show or set the system's hostname
date	Display or set the system date and time
whois	Query domain name information
env	Display or set environment variables
set	Set environment variables
export	Set environment variables
printenv	Print all or part of the environment
diff	Compare files line by line\n$GRN -u $NORM Output in unified format\n$GRN -q $NORM Report only when files differ
curl	Transfer data from or to a server\n$GRN -i $NORM show headers\n$GRN -I $NORM do a HEAD request\n$GRN --data=myvar=value $NORM send POST data\n$GRN --output=file $NORM Write output to a specified file\n$GRN --user=username:password $NORM Use HTTP Basic authentication
wget	Non-interactive network downloader - see$YEL curl$NORM command
ping	Send ICMP ECHO_REQUEST to network hosts\n$GRN -c $NORM Stop after sending count ECHO_REQUEST packets
ifconfig	Print networking information (IP address, Gateway, BSSID, Signal Strength, TX Power, etc)
dig	DNS lookup
ssh	OpenSSH remote login client
scp	Secure copy (remote file copy program)
telnet	User interface to the TELNET protocol
nc	netcat arbitrary TCP and UDP connections and listens
ifconfig	Configure network interfaces
ftp	File Transfer Protocol client
pip	Package manager
yum	Package manager
apt	Advanced Package Tool
tar	Archive files\n$GRN -c $NORM Create a new archive\n$GRN -x $NORM Extract files from an archive\n$GRN -f $NORM Use archive file
gzip	Compress files
gunzip	Decompress files
bzip2	Compress files
bunzip2	Decompress files
python	Python interpreter
sh	Shell
git	Distributed version control system
locate	Find files by name
sz	Send files (ZModem)
rz	Receive files (ZModem)
now	Display the current date and time
who	Show who is logged on
which	Locate a command
clear	Clear the terminal screen
cls	Clear the terminal screen
reboot	Reboot the system
poweroff	Halt, power-off, or reboot the machine
reason	Print the reason for the last reboot
passwd	Change user password
sleep	Delay for a specified amount of time
unalias	Remove alias definitions
alias	Create an alias for a command
exit	Exit the shell
help	Display help information about built-in commands. use$GRN help all$NORM to see detailed information. see also:$YEL man$NORM
md5sum	Calculate MD5 checksums
sha1sum	Calculate SHA-1 checksums
sha256sum	Calculate SHA-256 checksums
hexedit	View and edit files in hexadecimal format
blink	Flash the device LED
scani2c	List devices attached to the specified I2C bus\n$WHT scani2c$GRN --scl=<scl pin number> --sda=<sda pin number>$YEL --bus=<optional bus 0 or 1>$NORM
setpin	Set the state of a GPIO pin\n$GRN set --pin=<pin> --value=<state> $NORM Set specified pin to high (1) or low (0) state
getpin	read the state of a digital GPIO pin\n$GRN get --pin=<pin> [--pullup=1]$NORM
pwm	Set Pulse-Width-Modulation on a GPIO pin\n$GRN pwm --pin=<pin_number> --duty=<0 to 65535> --freq=<integer number>$YEL [--loop=<n> --ondelay=<seconds> --offdelay=<seconds> --voff=<duty cyle for off>]$NORM\noptional:$YEL --loop=<n>$NORM turn PWM on and off this many times (ending with it off)\n	 $YEL --ondelay=<seconds>\n	  --offdelay=<seconds>\n	  --voff=<duty cyle for off>$NORM duty-cycle to output for the "off" state (defaults to 0 if --duty was >32767, or 65535 otherwise)\n
pins	Display the input coming in to a GPIO pin\n$GRN pins <pin> $NORM Display input for the specified pin
adc	Display the analogue input from a GPIO\n$GRN adc <pin> $NORM Display analogue input for the specified pin
button	Display the state of the default button
photo	Take a photo from the device camera\n$GRN -o $NORM Specify output file
neo_blink	Set one or more NeoPixel LED colours\n$GRN neo_blink <pin> <color> $NORM Set the specified pin to the specified color
blink_all_pins	Output pin numbers using TTL 1's and 0's to identify pins
beep	Send an analogue tone to the default speaker\n$GRN beep <frequency> $NORM Set frequency of the tone\n$GRN <duration> $NORM Set duration of the tone
freq	Set a specific analogue output to a GPIO pin\n$GRN freq <pin> <frequency> $NORM Set the specified pin to the specified frequency
display	Control the screen
print	Write some text onto the screen\n$GRN print <text> $NORM Display the specified text
showbmp	Put a graphic onto the screen\n$GRN showbmp <file> $NORM Display the specified BMP file
clearlcd	Erase the LCD screen
mountsd	Attach an SD card
umount	Un-attach the SD card
run	Execute a Python program from the shell\n$GRN run <file> $NORM Run the specified Python file
espnowreceiver	Show incoming espnow messages
espnowsender	Send espnow messages\n$GRN espnowsender <message> $NORM Send the specified message
espnow	Send/receive espnow messages\n$GRN espnow $YEL[options]$NORM (all options are optional)\n$GRN $YEL--op=<send|rec>$NORM  send or recieve mode. default --op=rec\n$GRN $YEL--channel=2$NORM   default: use current (same as wifi A/P) channel\n$GRN $YEL--msg="<some message>"$NORM  default: Hello...\n$GRN $YEL--one$NORM  exit after recieving one message
hardreset	Reboot the chip
memtest	Test memory
bluescan	Show visible Bluetooth devices and data
temperature	Print current temperature
mag	Show the X, Y, and Z field strength from a magnetometer
gps	Display your latitude and longitude
radar	Output data from your attached radar device
telnetd	Listen for terminal input over TCP/IP
wifi	Control your Wi-Fi settings\n$GRN -c $NORM Connect to a network\n$GRN -d $NORM Disconnect from a network
shupdate	Overwrite all /lib/sh*.py files with the latest versions from https://github.com/gitcnd/mpy_shell
